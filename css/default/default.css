@import url("reflection.css");
@import url("meta.css");
@import url("key.css");
@import url("copy.css");
@import url("timeout.css");
@import url("note.css");
@import url("description.css");
@import url("attribute.css");

#app {
	
	display: flex;
	height: 100%;
	
}
#frame {
	
	display: flex;
	position: relative;
	
}
#screen, .view-root > div:only-child {
	
	display: flex;
	
}
.f1 #screen, .f1 .view-root > div:only-child,
.f4 #screen, .f4 .view-root > div:only-child,
.f7 #screen, .f7 .view-root > div:only-child { flex-direction: row }
.f2 #screen, .f2 .view-root > div:only-child,
.f5 #screen, .f5 .view-root > div:only-child,
.f8 #screen, .f8 .view-root > div:only-child { flex-direction: column }
.f3 #screen, .f3 .view-root > div:only-child,
.f6 #screen, .f6 .view-root > div:only-child,
.f9 #screen, .f9 .view-root > div:only-child { flex-direction: row-reverse }

.viewport {
	
	--border-color: rgba(216,216,216,1);
	
	--glow-color: rgba(255,255,255,.4);
	
	--last-h: calc(var(--last-height) * (var(--image-seq-target-raw-rect-height-0) / var(--last-raw-height)) * var(--last-correction));
	--last-w: calc(var(--last-width) * (var(--image-seq-target-raw-rect-height-0) / var(--last-raw-height)) * var(--last-correction));
	--viewport-height: calc(var(--height) * (var(--image-seq-target-raw-rect-height-0) / var(--raw-height)) * var(--correction));
	--viewport-raw-height: calc(var(--raw-height) * (var(--image-seq-target-raw-rect-height-0) / var(--raw-height)) * var(--correction));
	--viewport-width: calc(var(--width) * (var(--image-seq-target-raw-rect-height-0) / var(--raw-height)) * var(--correction));
	--viewport-raw-width: calc(var(--raw-width) * (var(--image-seq-target-raw-rect-height-0) / var(--raw-height)) * var(--correction));
	
	align-items: var(--viewport-align-items, flex-start);
	border-radius: 2rem;
	box-shadow: 0 0 0rem 1px var(--border-color), 0 0 0rem 2px rgba(80,80,80,1), 0 0 2rem .2rem var(--border-color);
	display: flex;
	height: var(--viewport-height);
	justify-content: var(--viewport-justify-content, flex-start);
	overflow: hidden;
	position: relative;
	transform: rotate3d(0,0,0, 0deg);
	width: var(--viewport-width);
	will-change: contents;
	
	--transition-duration: calc(2s / 3);
	--transition-duration-1: calc(var(--transition-duration) * calc(1 / 3));
	
	animation:	transition2 var(--transition-duration) ease-in 0s 1 var(--app-anime-default-rule),
					transition2 var(--transition-duration-1) ease-in calc(var(--time) - var(--transition-duration-1)) 1 reverse forwards running,
					glow calc(var(--time) / 2) ease-in 0s 2 alternate-reverse forwards running;
	
}
[data-current-label~="flex-center"] .viewport {
	--viewport-align-items: center;
	--viewport-justify-content: center;
}
@keyframes transition2 {
	0% {
		opacity: 0;
		transform: rotate3d(1,-3,0, 90deg);
	}
	80% {
		opacity: 1;
	}
	100% {
		transform: rotate3d(0,0,0, 90deg);
	}
}
@keyframes glow {
	0% {
		box-shadow: 0 0 0rem 1px var(--border-color), 0 0 0rem 2px rgba(80,80,80,1), 0 0 3rem .5rem var(--glow-color);
	}
	100% {
		box-shadow: 0 0 0rem 1px var(--border-color), 0 0 0rem 2px rgba(80,80,80,1), 0 0 0rem .0rem var(--glow-color);
	}
}


.scene {
	
	background:	var(--bgi) var(--bg-pos-flex)/contain no-repeat var(--bgc, transparent);
	
	position: absolute;
	
}
.scene.default {
	
	height: 100%;
	width: 100%;
	
}
.scene:not(.default) {
	
	transform-origin: var(--transform-origin, left top);
	z-index: var(--z-index, 0);
	
	animation: element-preset-anime var(--time) var(--func, ease) 0s var(--count, 1) normal var(--fill, forwards) running;
	
}
@keyframes element-preset-anime {
	
	0% {
		height: var(--from-h);
		left: var(--from-x);
		opacity: var(--o-0, 0);
		top: var(--from-y);
		transform: var(--from-t, none);
		width: var(--from-w);
	}
	30% {
		opacity: var(--o-1, 1);
	}
	70% {
		opacity: var(--o-2, 1);
	}
	100% {
		height: var(--to-h, var(--from-h));
		left: var(--to-x, var(--from-x));
		opacity: var(--o-3, 0);
		top: var(--to-y, var(--from-y));
		transform: var(--to-t, var(--from-t));
		width: var(--to-w, var(--from-w));
	}
	
}